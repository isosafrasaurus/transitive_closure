Require Import Coq.Bool.Bool.
Require Import Coq.Arith.Arith.
Require Import Coq.Lists.List.
Import ListNotations.

Section Types.

Inductive A : Type :=
  | wrap : nat -> A.

Definition nat_to_A (n : nat) : A :=
  wrap n.

Definition A_to_nat (a : A) : nat :=
  match a with
  | wrap n => n
  end.

Lemma nat_to_A_to_nat : forall n : nat, A_to_nat (nat_to_A n) = n.
Proof.
  intros n. simpl. reflexivity.
Qed.

Lemma A_to_nat_to_A : forall a : A, nat_to_A (A_to_nat a) = a.
Proof.
  intros a. destruct a. simpl. reflexivity.
Qed.

End Types.

Section Relations.

Definition relation := A -> A -> Prop.

Definition transitive (R: relation) :=
  forall x y z, R x y -> R y z -> R x z.

Inductive transitive_closure (R: relation) : relation :=
  | tc_base : forall x y, R x y -> transitive_closure R x y
  | tc_step : forall x y z,
      R x y -> transitive_closure R y z -> transitive_closure R x z.

End Relations.

Section AdjacencyMatrix.

Fixpoint range (n: nat) : list nat :=
  match n with
  | 0 => nil
  | S n' => n' :: (range n')
  end.

Definition decidable_eq_A (x y : A) : {x = y} + {x <> y}.
Proof.
  destruct x, y.
  destruct (Nat.eq_dec n n0).
  - left. f_equal. assumption.
  - right. intros H. inversion H. contradiction.
Defined.

Definition decidable_relation (x y : A) : bool :=
  match decidable_eq_A x y with
  | left _ => true
  | right _ => false
  end.

Definition check_relation_matrix (R : A -> A -> bool) (n : nat) (a : A) : list bool :=
  map (fun i => R a (nat_to_A i)) (rev (seq 0 n)).

Definition create_adjacency_matrix (R : A -> A -> bool) (n : nat) : list (list bool) :=
  map (check_relation_matrix R n) (map nat_to_A (rev (seq 0 n))).

Definition index (a : A) : nat :=
  match a with
  | wrap n => n
  end.

Definition index_inv (n : nat) : A :=
  wrap n.