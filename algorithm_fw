Require Import Coq.Arith.Arith.
Require Import Coq.Bool.Bool.
Require Import Coq.Lists.List.
Import ListNotations.

Require Import graph.
Require Import vertex.

Module algorithm_fw.

Structure vertex := mkVertex { unV : nat }.

Structure graph := mkGraph {
  adj_matrix : list (list bool);
  vertices : list vertex 
}.

Definition get_elem (m : list (list bool)) (i j : nat) : option bool :=
  match nth_error m i with
  | Some row => nth_error row j
  | None => None
  end.

(* Matrix addition for representing shorter path updates *)
Fixpoint matrix_add (m1 m2 : list (list bool)) : list (list bool) :=
  match m1 with
  | [] => []
  | row1 :: rest1 =>
    (map2 (fun b1 b2 => if (orb b1 b2) then infinity else b1) row1 (head [] m2)) :: matrix_add rest1 (tl m2)
  end.

(* Floyd-Warshall algorithm *)
Fixpoint floyd_warshall (g : graph) : list (list bool) :=
  match vertices g with
  | [] => []
  | _ => let n := length (vertices g) in
         let init_matrix := adj_matrix g in
         let rec fw_inner (m : list (list bool)) (k : nat) : list (list bool) :=
           match k with
           | 0 => m
           | S k' => fw_inner (matrix_add m (bool_matrix_mult m m)) k'
           end
         fw_inner init_matrix (n - 1)
  end.

Theorem floyd_warshall_correct :
  forall (g : graph),
    let n := length (vertices g) in
    let result := floyd_warshall g in
    forall i j : nat,
      i < n -> j < n ->
      nth_error result i = Some row ->
      nth_error row j = Some true ->
      exists p : path, shortest_path g i j p.


End algorithm_fw.