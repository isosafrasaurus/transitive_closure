Require Import Coq.Arith.Arith.
Require Import Coq.Bool.Bool.
Require Import Coq.Lists.List.
Import ListNotations.

Require Import graph.
Require Import vertex.
Require Import algorithm_fw.

Module tarjan.

Fixpoint find_neighbors (g : graph) (v : vertex) : list vertex :=
  let idx := find_index v (vertices g) 0 in (* Get vertex's index in the adjacency matrix *)
  match nth_error (adj_matrix g) idx with
  | Some row => 
      map (fun (w, connected) => if connected then mkVertex w else v) 
          (enumerate_with_index row) (* Enumerate elements along with indices *)
  | None => [] 
  end. 


(* State for the DFS process *)
Record dfs_state := { 
  index : nat; (* Unique index for each vertex *)
  stack : list vertex;
  visited : list bool; (* Marks if a vertex has been visited *)
  dfn : list nat;  (* Depth-first search index  *)
  low : list nat;   (* Low-link value *)
  sccs : list (list vertex) 
}.

(* Tarjan's Algorithm *)
Fixpoint find_sccs (g : graph) : list (list vertex) :=
  let init_state := { index := 0; 
                      stack := []; 
                      visited := map (fun _ => false) (vertices g); 
                      dfn := map (fun _ => 0) (vertices g); 
                      low := map (fun _ => 0) (vertices g); 
                      sccs := [] } in
  let rec tarjan_inner (st : dfs_state) (v : vertex) : dfs_state :=
    let idx_v := find_index v (vertices g) 0 in
    let new_visited := update_list (st.visited) idx_v true in  (* Mark visited *)
    let new_index := st.index + 1 in
    let new_dfn := update_list st.dfn idx_v new_index in    (* Assign index = dfn *)
    let new_low := update_list st.low idx_v new_index in    (* low = dfn initially *)
    let new_stack := v :: st.stack in                        (* Push onto stack *)

    (* Explore neighbors *)
    let st' := fold_left (fun st' w => 
                    let idx_w := find_index w (vertices g) 0 in
                    if not (nth_bool new_visited idx_w) then (* If neighbor not visited *) 
                      tarjan_inner st' w 
                    else if find w st.stack true then (* Back-edge to SCC member *)
                      { st' with low := update_list (st'.low) idx_v (min (nth_bool (st'.low) idx_v) (nth_bool (st'.dfn) idx_w)) 
                      } 
                    else st') (find_neighbors g v) st in

    (* Check if v is the root of an SCC *)
    if (nth_bool new_dfn idx_v) = (nth_bool new_low idx_v) then 
      let (scc, new_stack') := 
        match new_stack with
        | h :: t => if h = v then ([], t) else let (scc', t') := (scc, t) in (h :: scc', t') 
        | _ => ([], [])
        end in
      { st' with low := update_list (st'.low) idx_v 0;  (* Reset low for other SCCs *)
                stack := new_stack'; 
                sccs := scc :: st'.sccs }
    else st'

  in
  fold_left (fun st v => tarjan_inner st v) init_state (vertices g)).sccs
end.

(* Condensed graph construction *)
Fixpoint condense_graph (g : graph) (sccs : list (list vertex)) : graph :=
  let new_vertices := map (fun scc => mkVertex (0)) sccs in (* Create a single vertex per SCC *)
  let new_matrix := map (fun sccs1 => map (fun scc2 => 
                                    (* Check if there's an edge between any vertex in scc1 and any in scc2 *)
                                    exists u v, In u scc1 /\ In v scc2 /\ (get_elem (adj_matrix g) u v) = Some true)
                                  sccs) sccs in
  mkGraph { adj_matrix := new_matrix; vertices := new_vertices }
end.

(* Adapter to use a more general transitive closure implementation *)
Fixpoint transitive_closure_adapter (g: graph) : list (list bool) :=
    let rec aux (v : vertex) (visited : list vertex) (acc : list (list bool)) : list (list bool) :=
      match visited with
      | [] => acc
      | h::t => if In v (vertices g) then 
                    let new_acc := add_row acc ((map (fun w => (* Check reachability from v to w *)) (vertices g))) in
                    aux h t new_acc
                  else 
                    aux h t acc
      end in
    aux (hd (vertices g)) (vertices g) []
end.

End tarjan.